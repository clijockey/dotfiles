#!/usr/bin/env bash

#==============================================================================
# Title:
# Description:
# Copyright:
# Author:          	Rob Edwards (robedwa/@clijockey)
# Date:
# Version:
# Dependencies:
# Parameters:
#
# License:          Copying and distribution of this file, with or without modification,
#                   are permitted in any medium without royalty provided the copyright
#                   notice, original author and this notice are preserved. This file is
#                   offered as-is, without any warranty.
#==============================================================================

UNAMER=$(uname -r)
#
# bootstrap installs things.
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)
set -e
echo ''


# Set some output colours to feedback during setup
info () {
    printf " [ \033[00;34m..\033[0m ] $1\n"
}

user () {
    printf "\r [ \033[0;33m?\033[0m ] $1\n "
}

success () {
    printf "\r\033[2K [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}


setup_gitconfig () {
    # blah blah blah
    success "..Setting up!"
    if ! [ -f git/gitconfig.symlink ]
    then
        #info 'setup gitconfig'
        git_credential='cache'

    if [ "$(uname -s)" == "Darwin" ]
    then
        git_credential='osxkeychain'
        sucess "..Configured!"
    fi

    #info "Configuring Github settings ..... "
    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail
    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink
    success 'gitconfig'
    fi
    success "..Configured!"
}

install_zsh () {
  success "..Checking ZSH"
  if [ -d ~/.oh-my-zsh ]; then
    info "..oh-my-zsh already exists, removing so can be replaced with latest!"
    rm -rf ~/.oh-my-zsh
    success ".. Removed!"
  fi
    success "Installing ZSH"
    #if [$FLAVOUR = "osx"]; then
      git clone --quiet https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh >/dev/null
      # Copy each extension to custom dir
      success '..Oh-My-ZSH GitHub repo Cloned'
    #elif [[ -x /usr/bin/curl ]]; then
    #  sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    #  success '..Oh-My-ZSH installed via curl'
    #elif [[ -x /usr/bin/wget ]]; then
    #  sh -c "$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
    #  success '..Oh-My-ZSH installed via wget'
    #else
    #  fail "[ERROR] Curl or wget not installed"
      # write code to install it.
    #fi
    #if [$OS == 'Redhat']; then
    #    sudo yum -y install zsh >/dev/null
    #    success '..zsh installed'
        #sudo sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    #fi
    #done
}


link_file () {
    local src=$1 dst=$2
    local overwrite= backup= skip=
    local action=
    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then
        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then
            local currentSrc="$(readlink $dst)"
            if [ "$currentSrc" == "$src" ]
            then
                skip=true;
            else
                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action
                case "$action" in
                    o )
                    overwrite=true;;
                    O )
                    overwrite_all=true;;
                    b )
                    backup=true;;
                    B )
                    backup_all=true;;
                    s )
                    skip=true;;
                    S )
                    skip_all=true;;
                    * )
                    ;;
                esac
            fi
        fi
        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}
        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "..removed $dst"
        fi
        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            success "..moved $dst to ${dst}.backup"
        fi
        if [ "$skip" == "true" ]
        then
            success "..skipped $src"
        fi
    fi
    if [ "$skip" != "true" ] # "false" or empty
    then
        ln -s "$1" "$2"
        success "..linked $1 to $2"
    fi
}

install_dotfiles () {
    #info '..Installing dotfiles'
    local overwrite_all=false backup_all=false skip_all=false
    for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
    success '..dotfiles configured!'
}

install_colours () {
  #
  #info "..Solarized Colors Setup"
  git clone --quiet https://github.com/altercation/vim-colors-solarized.git >/dev/null
  if [ ! -d ~/.vim/colors ]; then
    mkdir -p ~/.vim/colors
  fi
  mkdir -p ~/.vim/colors/;
  mv vim-colors-solarized/colors/solarized.vim ~/.vim/colors/
  #mkdir ~/.vim/colors/
  success "..Solarized Installed"
  #info "..Configure vim"
  # if [ ! -d ~/.vim/colors ]; then
  #   mkdir -p ~/.vim/colors
  # fi
  success "..vim colors setup"

  #info "..Configure GRC"
  git clone --quiet https://github.com/garabik/grc.git ~/.grc >/dev/null
  #cd ./grc
  success "..GRC setup"

}

finish_off () {
    if [[ ${UNAMER} =~ .*\.amzn1.* ]]
    then
        echo "This is an EC2 instance"
        success 'Tidied up and Complete'
        #sudo chsh ec2-user -s /bin/zsh
    #else
    #    echo "something else"
    fi
    #sudo ../install.#!/bin/sh
    #cd ..

}

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]; then
    success "Detected Darwin (OSX) based operating system"
    FLAVOUR="osx"
    # info "Detected macOS"
    # info "Installing dependencies"
    # info "setup GitHub"
    # setup_gitconfig
    # info "setup zsh"
    # install_zsh
    # info "setup dotfiles"
    # install_dotfiles
    # info "finish off"
    # finish_off
    # if source bin/dot > /tmp/dotfiles-dot 2>&1
    # then
    #     success "Dependencies installed"
    # else
    #     fail "Error installing dependencies"
    # fi
elif [ -f /etc/debian_version ]; then
# Might look at using if [[ -x /usr/bin/apt-get ]]; then
    success "Detected Debian based operating system"
    #info "Installing dependencies"
    FLAVOUR="Debian"
    #VER=$(cat /etc/debian_version)
elif [ -f /etc/redhat-release ]; then
# Might look to change to use elif [[ -x /usr/bin/yum ]]; then
    success "Detected RetHat variant (RHEL/Centos) operating system"
    #info "Installing dependencies"
    FLAVOUR="Redhat"
    #install_zsh_yum
else
  fail "[ERROR] Cannot detect operating system"

fi


info "Setup GitHub"
setup_gitconfig
success "..GitHub Setup"
info "Setup zsh"
install_zsh
success "..ZSH Setup"
info "Setup dotfiles"
install_dotfiles
success "..dotfiles Setup"
#Colours and theme
info "Setup Colourings"
install_colours
success "..Colours Setup"
info "Tidy up and complete"
finish_off
success "Complete"

#hidden files and dir on Linux
# make zsh default
# reread .zshrc file

echo ''
echo ' Complete!'
