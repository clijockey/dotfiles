#!/usr/bin/env bash

#==============================================================================
# Description:      Bootstrap Script to get dotfiles setup and machine 
# Author:          	Rob Edwards (robedwa/@clijockey)
#
# License:          Copying and distribution of this file, with or without modification,
#                   are permitted in any medium without royalty provided the copyright
#                   notice, original author and this notice are preserved. This file is
#                   offered as-is, without any warranty.
#==============================================================================

# use set -e instead of #!/bin/bash -e in case we're
# called with `bash ~/bin/scriptname`
set -e # bail out early if any command fails
set -u # fail if we hit unset variables
set -o pipefail # fail if any component of any pipe fails

UNAMER=$(uname -r)
#
# bootstrap installs things.
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)
set -e
echo ''


# Set some output colours to feedback during setup
info () {
    printf " [ \033[00;34m..\033[0m ] $1\n"
}

user () {
    printf "\r [ \033[0;33m?\033[0m ] $1\n "
}

success () {
    printf "\r\033[2K [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

install_zsh () {
  success "..Installing oh-my-zsh"


  if [ "$FLAVOUR" == Debian ]; then
    sudo apt update
    sudo apt upgrade
    sudo apt install zsh
    success "..zsh installed via apt for Debain system."
  elif [ "$FLAVOUR" == Redhat ]; then
    sudo yum upgrade
    sudo yum install zsh
    success "..zsh installed for Redhat based system"
  elif [ "$FLAVOUR" == osx ]; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.zshhubusercontent.com/Homebrew/install/master/install)"
    brew doctor
    brew install zsh
    sudo sh -c "echo $(which zsh) >> /etc/shells" && chsh -s $(which zsh)
  fi
  success '..zsh installed on Mac'

}



link_file () {
    local src=$1 dst=$2
    local overwrite= backup= skip=
    local action=
    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then
        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then
            local currentSrc="$(readlink $dst)"
            if [ "$currentSrc" == "$src" ]
            then
                skip=true;
            else
                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action
                case "$action" in
                    o )
                    overwrite=true;;
                    O )
                    overwrite_all=true;;
                    b )
                    backup=true;;
                    B )
                    backup_all=true;;
                    s )
                    skip=true;;
                    S )
                    skip_all=true;;
                    * )
                    ;;
                esac
            fi
        fi
        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}
        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "..removed $dst"
        fi
        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            success "..moved $dst to ${dst}.backup"
        fi
        if [ "$skip" == "true" ]
        then
            success "..skipped $src"
        fi
    fi
    if [ "$skip" != "true" ] # "false" or empty
    then
        ln -s "$1" "$2"
        success "..linked $1 to $2"
    fi
}

install_dotfiles () {
    info '..Installing dotfiles'
    local overwrite_all=false backup_all=false skip_all=false
    for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
    success '..dotfiles configured!'
}

main() {
  # What system am I running on?
  if [ "$(uname -s)" == "Darwin" ]; then
      success "Detected Darwin (OSX) based operating system"
      FLAVOUR="osx"
  elif [ -f /etc/debian_version ]; then
  # Might look at using if [[ -x /usr/bin/apt-get ]]; then
      success "Detected Debian based operating system"
      #info "Installing dependencies"
      FLAVOUR="Debian"
      #VER=$(cat /etc/debian_version)
  elif [ -f /etc/redhat-release ]; then
  # Might look to change to use elif [[ -x /usr/bin/yum ]]; then
      success "Detected RetHat variant (RHEL/Centos) operating system"
      #info "Installing dependencies"
      FLAVOUR="Redhat"
  else
    fail "[ERROR] Cannot detect operating system"

  fi


  info "Setup zsh"
  install_zsh
  success "..ZSH Setup"

  info "Setting up dotfiles"
  install_dotfiles
  # success "..dotfiles Setup"

  success "Complete"

}

main "$@"